{"ast":null,"code":"import * as fromRoot from '@core/root-store';\nimport { pairwise } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@ngrx/store\";\n/**\n * Maintain a history of navigation events and provide helper methods\n * for differentiating between view changes and page changes. To determine\n * the difference we're assuming that a view change will be via query params\n * and that a page will not have any query params\n */\n\nexport let RouterStateService = /*#__PURE__*/(() => {\n  class RouterStateService {\n    constructor(_router, store) {\n      this._router = _router;\n      this.store = store;\n      this._navigationHistory = [];\n      this._fromToHistory = [];\n      this._pageHistory = [];\n\n      this._listenToStore();\n    }\n    /**\n     * Listen to the router state to populate history information\n     * @private\n     */\n\n\n    _listenToStore() {\n      this.store.select(fromRoot.selectRouterState).pipe(pairwise()).subscribe(([oldRoute, newRoute]) => {\n        this._fromToHistory = [...this._fromToHistory, {\n          from: oldRoute,\n          to: newRoute\n        }];\n        this._navigationHistory = [...this._navigationHistory, newRoute];\n\n        if (!Object.keys(newRoute.state.queryParams).length) {\n          this._pageHistory = [...this._pageHistory, newRoute];\n        }\n\n        this.doCleanup();\n      });\n    }\n    /**\n     * Clean up the history items. We want want to only keep what is necessary.\n     * Once we get 27 items in any of the history arrays we want to remove the first\n     * 25 items leaving the current and previous history items\n     */\n\n\n    doCleanup() {\n      if (this._fromToHistory.length > 26) {\n        this._fromToHistory.splice(0, 25);\n      }\n\n      if (this._pageHistory.length > 26) {\n        this._pageHistory.splice(0, 25);\n      }\n\n      if (this._navigationHistory.length > 26) {\n        this._navigationHistory.splice(0, 25);\n      }\n    }\n    /**\n     * An array of router states as the user navigates. Mimics history\n     */\n\n\n    get navigationHistory() {\n      return this._navigationHistory;\n    }\n    /**\n     * Array of urls the user navigated to\n     */\n\n\n    get navigationUrlHistory() {\n      return this._navigationHistory.map(routerState => routerState.state.url);\n    }\n    /**\n     * Array of page router states the user has navigated to\n     */\n\n\n    get pageHistory() {\n      return this._pageHistory;\n    }\n    /**\n     * Array of page urls the user has navigated to\n     */\n\n\n    get pageUrlHistory() {\n      return this._pageHistory.map(routerState => routerState.state.url);\n    }\n    /**\n     * Array of navigations that shows where a user navigated from and where they\n     * navigated to\n     */\n\n\n    get fromToHistory() {\n      return this._fromToHistory;\n    }\n    /**\n     * Array of navigations that shows the URLs where a user navigated from and where they\n     * navigated to\n     */\n\n\n    get fromToUrlHistory() {\n      return this._fromToHistory.map(historyState => {\n        var _a, _b;\n\n        return {\n          from: (_a = historyState.from) === null || _a === void 0 ? void 0 : _a.state.url,\n          to: (_b = historyState.to) === null || _b === void 0 ? void 0 : _b.state.url\n        };\n      });\n    }\n    /**\n     * Get the user's previous URL\n     */\n\n\n    get previousUrl() {\n      var _a;\n\n      if (this._fromToHistory.length) {\n        return (_a = this._fromToHistory[this._fromToHistory.length - 1].from) === null || _a === void 0 ? void 0 : _a.state.url;\n      }\n\n      return undefined;\n    }\n    /**\n     * Get the user's previous Page URL\n     */\n\n\n    get previousPageUrl() {\n      var _a, _b;\n\n      if (this._pageHistory.length) {\n        let prevPageUrl = (_a = this._pageHistory[this._pageHistory.length - 1]) === null || _a === void 0 ? void 0 : _a.state.url;\n\n        if (prevPageUrl === this.currentPageUrl) {\n          prevPageUrl = (_b = this._pageHistory[this._pageHistory.length - 2]) === null || _b === void 0 ? void 0 : _b.state.url;\n        }\n\n        return prevPageUrl;\n      }\n\n      return undefined;\n    }\n    /**\n     * Get the current user parameters\n     */\n\n\n    get currentQueryParams() {\n      const navHistory = this.navigationHistory;\n      const currentPageState = navHistory[navHistory.length - 1];\n      return currentPageState.state.queryParams;\n    }\n    /**\n     * Get the current full url\n     */\n\n\n    get currentUrl() {\n      const navHistory = this.navigationHistory;\n      const currState = navHistory[navHistory.length - 1];\n      return currState.state.url;\n    }\n    /**\n     * Get the current page url (no query parameters included)\n     */\n\n\n    get currentPageUrl() {\n      const currPageUrl = this.currentUrl.split('?');\n      return currPageUrl[0];\n    }\n\n  }\n\n  RouterStateService.ɵfac = function RouterStateService_Factory(t) {\n    return new (t || RouterStateService)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.Store));\n  };\n\n  RouterStateService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: RouterStateService,\n    factory: RouterStateService.ɵfac,\n    providedIn: 'root'\n  });\n  return RouterStateService;\n})();","map":null,"metadata":{},"sourceType":"module"}