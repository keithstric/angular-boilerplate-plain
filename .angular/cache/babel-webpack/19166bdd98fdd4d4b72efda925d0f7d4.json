{"ast":null,"code":"import { CachableRoutePatterns } from '@core/interfaces/api.interface';\nimport { LocalStorageTypes } from '@core/interfaces/local-storage.interface';\nimport { LocalStorageService } from '@core/services/local-storage/local-storage.service';\nimport { Logger } from '@core/services/logger/logger';\nimport * as Route from 'route-parser';\nimport * as i0 from \"@angular/core\";\n\nclass HttpCache {}\n\nexport let HttpCacheService = /*#__PURE__*/(() => {\n  class HttpCacheService {\n    constructor() {\n      this.cache = {};\n      this.cachableRoutes = CachableRoutePatterns;\n      Logger.debug(`HttpCacheService constructed for ${Object.keys(this.cachableRoutes).join(',\\n')}`);\n    }\n    /**\n     * Get an item from the cache\n     * @param req\n     */\n\n\n    get(req) {\n      const cachedItem = this.shouldCacheToSessionStorage(req.urlWithParams) ? LocalStorageService.getItem(LocalStorageTypes.SESSION, req.urlWithParams) : this.cache[req.urlWithParams];\n\n      if (cachedItem) {\n        return cachedItem;\n      }\n    }\n    /**\n     * Put an item in the cache\n     * @param req\n     * @param res\n     */\n\n\n    put(req, res) {\n      const shouldCache = this.shouldCache(req.urlWithParams);\n      const shouldCacheToSessionStorage = this.shouldCacheToSessionStorage(req.urlWithParams);\n\n      if (shouldCache && shouldCacheToSessionStorage) {\n        this.cacheToSessionStorage(req.urlWithParams, res);\n      } else if (shouldCache) {\n        this.cacheToLocal(req.urlWithParams, res);\n      }\n    }\n    /**\n     * Delete an item from the cache\n     * @param req\n     */\n\n\n    delete(req) {\n      const cachedRequest = this.get(req);\n      const shouldCacheToSessionStorage = this.shouldCacheToSessionStorage(req.urlWithParams);\n      let returnVal = false;\n\n      if (shouldCacheToSessionStorage && cachedRequest) {\n        LocalStorageService.removeItem(LocalStorageTypes.SESSION, req.urlWithParams);\n        returnVal = true;\n      } else if (cachedRequest) {\n        delete this.cache[req.urlWithParams];\n        returnVal = true;\n      }\n\n      return returnVal;\n    }\n    /**\n     * Determine if a url SHOULD be cached or not. It must match a route pattern provided in\n     * @link(CachableRoutePatterns)\n     *\n     * @param urlWithParams\n     */\n\n\n    shouldCache(urlWithParams) {\n      let shouldCache = false;\n      Object.keys(this.cachableRoutes).forEach(pattern => {\n        const route = new Route(pattern);\n        const routeMatch = route.match(urlWithParams);\n\n        if (routeMatch) {\n          shouldCache = !!routeMatch;\n        }\n      });\n      return shouldCache;\n    }\n    /**\n     * Determine if a url SHOUlD be placed in sessionStorage or not. It must match a route pattern provided in\n     * @link(CachableRoutePatterns) AND the item in CachableRoutePatterns must have a value of `true`\n     *\n     * @param urlWithParams\n     */\n\n\n    shouldCacheToSessionStorage(urlWithParams) {\n      let shouldCache = false;\n      Object.keys(this.cachableRoutes).forEach(pattern => {\n        const route = new Route(pattern);\n        const routeMatch = route.match(urlWithParams);\n\n        if (routeMatch && this.cachableRoutes[pattern] === true) {\n          shouldCache = !!routeMatch;\n        }\n      });\n      return shouldCache;\n    }\n    /**\n     * Place the response in the local `cache` variable\n     *\n     * @param urlWithParams\n     * @param res\n     */\n\n\n    cacheToLocal(urlWithParams, res) {\n      this.cache[urlWithParams] = res;\n    }\n    /**\n     * Place the response in sessionStorage\n     * @param urlWithParams\n     * @param res\n     */\n\n\n    cacheToSessionStorage(urlWithParams, res) {\n      LocalStorageService.setItem(LocalStorageTypes.SESSION, urlWithParams, res);\n    }\n\n  }\n\n  HttpCacheService.ɵfac = function HttpCacheService_Factory(t) {\n    return new (t || HttpCacheService)();\n  };\n\n  HttpCacheService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: HttpCacheService,\n    factory: HttpCacheService.ɵfac,\n    providedIn: 'root'\n  });\n  return HttpCacheService;\n})();","map":null,"metadata":{},"sourceType":"module"}