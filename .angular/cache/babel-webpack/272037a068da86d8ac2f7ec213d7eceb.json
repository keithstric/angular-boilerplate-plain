{"ast":null,"code":"import * as fromRouter from '@ngrx/router-store';\nimport * as fromUser from '@core/root-store/user';\nimport * as fromLoading from '@core/root-store/loading';\nimport { createFeatureSelector, createSelector } from '@ngrx/store';\n/**\n * A map of reducers. Use this instead of defining them in the module\n */\n\nexport const reducers = {\n  user: fromUser.UserReducer,\n  loading: fromLoading.LoadingReducer,\n  router: fromRouter.routerReducer\n}; // root feature selectors\n\nexport const selectUserFeatureState = createFeatureSelector('user');\nexport const selectLoadingFeatureState = createFeatureSelector('loading');\n/**\n * The @ngrx/router-store state feature selector\n */\n\nexport const selectRouterState = createFeatureSelector('router');\nexport const selectRouterUrl = createSelector(selectRouterState, routerState => routerState.state.url);\nexport const selectRouterParams = createSelector(selectRouterState, routerState => routerState.state.params);\nexport const selectRouterQueryParams = createSelector(selectRouterState, routerState => routerState.state.queryParams);\n/**\n * This is a custom serializer for @ngrx/router-store. It builds the state object to include\n * params, queryParams from the url. More properties can be added here\n */\n\nexport class CustomSerializer {\n  serialize(routerState) {\n    const {\n      url\n    } = routerState;\n    const {\n      queryParams\n    } = routerState.root;\n    let state = routerState.root;\n\n    while (state.firstChild) {\n      state = state.firstChild;\n    }\n\n    const {\n      params\n    } = state;\n    return {\n      url,\n      queryParams,\n      params\n    };\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}