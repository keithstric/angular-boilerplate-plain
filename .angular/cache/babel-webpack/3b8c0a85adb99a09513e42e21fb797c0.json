{"ast":null,"code":"import { ChangeUserPasswordFailureAction, ChangeUserPasswordSuccessAction, ForgotUserPasswordFailureAction, ForgotUserPasswordSuccessAction, LoginUserFailureAction, LoginUserSuccessAction, LogOutUserFailureAction, LogOutUserSuccessAction, RegisterUserFailureAction, RegisterUserSuccessAction, UserActionTypes } from '@core/root-store/user/user.action';\nimport { createEffect, ofType } from '@ngrx/effects';\nimport { of } from 'rxjs';\nimport { catchError, map, mergeMap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"@core/services/auth/auth.service\";\nexport let UserEffects = /*#__PURE__*/(() => {\n  class UserEffects {\n    constructor(actions, _auth) {\n      this.actions = actions;\n      this._auth = _auth;\n      this.loginUser = createEffect(() => this.actions.pipe(ofType(UserActionTypes.LOGIN_USER), mergeMap(action => this._auth.login(action.payload).pipe(map(user => new LoginUserSuccessAction(user)), catchError(err => of(new LoginUserFailureAction(err)))))));\n      this.logoutUser = createEffect(() => this.actions.pipe(ofType(UserActionTypes.LOGOUT_USER), mergeMap(action => this._auth.logout().pipe(map(() => new LogOutUserSuccessAction()), catchError(err => of(new LogOutUserFailureAction(err)))))));\n      this.registerUser = createEffect(() => this.actions.pipe(ofType(UserActionTypes.REGISTER_USER), mergeMap(action => this._auth.register(action.payload).pipe(map(user => new RegisterUserSuccessAction(user)), catchError(err => of(new RegisterUserFailureAction(err)))))));\n      this.changePw = createEffect(() => this.actions.pipe(ofType(UserActionTypes.CHANGE_PASSWORD), mergeMap(action => this._auth.changePassword(action.payload).pipe(map(rawUser => new ChangeUserPasswordSuccessAction(rawUser)), catchError(err => of(new ChangeUserPasswordFailureAction(err)))))));\n      this.forgotPw = createEffect(() => this.actions.pipe(ofType(UserActionTypes.FORGOT_PASSWORD), mergeMap(action => this._auth.forgotPassword(action.payload).pipe(map(rawUser => new ForgotUserPasswordSuccessAction(rawUser)), catchError(err => of(new ForgotUserPasswordFailureAction(err)))))));\n    }\n\n  }\n\n  UserEffects.ɵfac = function UserEffects_Factory(t) {\n    return new (t || UserEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.AuthService));\n  };\n\n  UserEffects.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UserEffects,\n    factory: UserEffects.ɵfac\n  });\n  return UserEffects;\n})();","map":null,"metadata":{},"sourceType":"module"}