{"ast":null,"code":"import { ServiceLocator } from '@core/services/service-locator';\nimport { SnackBarRef } from '@shared/components/snack-bar/snack-bar.ref';\nimport * as i0 from \"@angular/core\";\nvar NotificationPermissions = /*#__PURE__*/(() => {\n  (function (NotificationPermissions) {\n    NotificationPermissions[\"GRANTED\"] = \"granted\";\n    NotificationPermissions[\"DENIED\"] = \"denied\";\n    NotificationPermissions[\"DEFAULT\"] = \"default\";\n  })(NotificationPermissions || (NotificationPermissions = {}));\n\n  return NotificationPermissions;\n})();\nexport let NotificationService = /*#__PURE__*/(() => {\n  class NotificationService {\n    constructor() {}\n    /**\n     * Show a snackbar/toast message\n     * @param config\n     */\n\n\n    static showSnackbar(config) {\n      const snackbarRef = ServiceLocator.injector.get(SnackBarRef);\n      snackbarRef.show(config);\n    }\n    /**\n     * Show a confirmation dialog\n     *\n     * @example\n     * const ref = this._ui.showConfirmDialog({message: 'foo', title: 'bar'});\n     * // if you don't care about the result, you can omit this\n     * ref.afterOpen().subscribe(result => {console.log(result)});\n     *\n     * @param modalConfig\n     */\n\n\n    static showConfirmDialog(modalConfig) {// const bsModalService = ServiceLocator.injector.get(BsModalService);\n      // return bsModalService.show(ConfirmModalComponent, {initialState: modalConfig});\n    }\n\n  }\n\n  NotificationService.ɵfac = function NotificationService_Factory(t) {\n    return new (t || NotificationService)();\n  };\n\n  NotificationService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: NotificationService,\n    factory: NotificationService.ɵfac\n  });\n  return NotificationService;\n})();","map":null,"metadata":{},"sourceType":"module"}