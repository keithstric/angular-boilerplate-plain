{"ast":null,"code":"'use strict';\n\nvar createVisitor = require('./create_visitor'),\n    escapeRegExp = /[\\-{}\\[\\]+?.,\\\\\\^$|#\\s]/g;\n/**\n * @class\n * @private\n */\n\n\nfunction Matcher(options) {\n  this.captures = options.captures;\n  this.re = options.re;\n}\n/**\n * Try matching a path against the generated regular expression\n * @param  {String} path The path to try to match\n * @return {Object|false}      matched parameters or false\n */\n\n\nMatcher.prototype.match = function (path) {\n  var match = this.re.exec(path),\n      matchParams = {};\n\n  if (!match) {\n    return;\n  }\n\n  this.captures.forEach(function (capture, i) {\n    if (typeof match[i + 1] === 'undefined') {\n      matchParams[capture] = undefined;\n    } else {\n      matchParams[capture] = decodeURIComponent(match[i + 1]);\n    }\n  });\n  return matchParams;\n};\n/**\n * Visitor for the AST to create a regular expression matcher\n * @class RegexpVisitor\n * @borrows Visitor-visit\n */\n\n\nvar RegexpVisitor = createVisitor({\n  'Concat': function (node) {\n    return node.children.reduce(function (memo, child) {\n      var childResult = this.visit(child);\n      return {\n        re: memo.re + childResult.re,\n        captures: memo.captures.concat(childResult.captures)\n      };\n    }.bind(this), {\n      re: '',\n      captures: []\n    });\n  },\n  'Literal': function (node) {\n    return {\n      re: node.props.value.replace(escapeRegExp, '\\\\$&'),\n      captures: []\n    };\n  },\n  'Splat': function (node) {\n    return {\n      re: '([^?]*?)',\n      captures: [node.props.name]\n    };\n  },\n  'Param': function (node) {\n    return {\n      re: '([^\\\\/\\\\?]+)',\n      captures: [node.props.name]\n    };\n  },\n  'Optional': function (node) {\n    var child = this.visit(node.children[0]);\n    return {\n      re: '(?:' + child.re + ')?',\n      captures: child.captures\n    };\n  },\n  'Root': function (node) {\n    var childResult = this.visit(node.children[0]);\n    return new Matcher({\n      re: new RegExp('^' + childResult.re + '(?=\\\\?|$)'),\n      captures: childResult.captures\n    });\n  }\n});\nmodule.exports = RegexpVisitor;","map":null,"metadata":{},"sourceType":"script"}