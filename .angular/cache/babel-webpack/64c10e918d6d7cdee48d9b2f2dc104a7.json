{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport * as i0 from \"@angular/core\";\n/**\n * This directive is for supporting dragging and dropping a file onto a drop zone\n *\n * @example\n * <div class=\"drop-zone\" appFileDnD>\n *   ...\n * </div>\n */\n\nexport let FileDnDDirective = /*#__PURE__*/(() => {\n  class FileDnDDirective {\n    constructor() {\n      this.fileDropped = new EventEmitter();\n    }\n\n    onDragOver(evt) {\n      evt.preventDefault();\n      evt.stopPropagation(); // console.log('FileDnDDirective, onDragOver', evt);\n    }\n\n    onDragLeave(evt) {\n      evt.preventDefault();\n      evt.stopPropagation(); // console.log('FileDnDDirective, onDragLeave', evt);\n    }\n\n    onDrop(evt) {\n      evt.preventDefault();\n      evt.stopPropagation();\n      const files = evt.dataTransfer.files;\n\n      if (files === null || files === void 0 ? void 0 : files.length) {\n        this.fileDropped.emit(files);\n      }\n    }\n\n  }\n\n  FileDnDDirective.ɵfac = function FileDnDDirective_Factory(t) {\n    return new (t || FileDnDDirective)();\n  };\n\n  FileDnDDirective.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n    type: FileDnDDirective,\n    selectors: [[\"\", \"appFileDnD\", \"\"]],\n    hostBindings: function FileDnDDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"dragover\", function FileDnDDirective_dragover_HostBindingHandler($event) {\n          return ctx.onDragOver($event);\n        })(\"dragleave\", function FileDnDDirective_dragleave_HostBindingHandler($event) {\n          return ctx.onDragLeave($event);\n        })(\"drop\", function FileDnDDirective_drop_HostBindingHandler($event) {\n          return ctx.onDrop($event);\n        });\n      }\n    },\n    outputs: {\n      fileDropped: \"fileDropped\"\n    }\n  });\n  return FileDnDDirective;\n})();","map":null,"metadata":{},"sourceType":"module"}