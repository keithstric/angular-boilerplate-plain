{"ast":null,"code":"import { Logger } from '@core/services/logger/logger';\nimport { BehaviorSubject } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { ApiEndpoints, ApiMethod } from '@core/interfaces/api.interface';\nimport { LocalStorageTypes } from '@core/interfaces/local-storage.interface';\nimport { User } from '@core/models/user.model';\nimport { LocalStorageService } from '@core/services/local-storage/local-storage.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@core/services/http/http.service\";\nimport * as i2 from \"@core/services/error-handler/error-handler.service\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(_http, _error) {\n      this._http = _http;\n      this._error = _error;\n      this.authData = new BehaviorSubject(null);\n    }\n    /**\n     * Determine if current user is authenticated or not\n     * @returns {boolean}\n     */\n\n\n    isAuthenticated() {\n      return !!LocalStorageService.getItem(LocalStorageTypes.SESSION, 'user');\n    }\n    /**\n     * Get the current user\n     * @returns {User}\n     */\n\n\n    getUser() {\n      return User.deserialize(LocalStorageService.getItem(LocalStorageTypes.SESSION, 'user'));\n    }\n    /**\n     * Get the current user's initials\n     * @returns {string}\n     */\n\n\n    getUserInitials() {\n      if (this.getUser()) {\n        return this.getUser().initials;\n      }\n\n      return null;\n    }\n    /**\n     * Perform the login and store the returned user in sessionStorage\n     * @param loginData {RawUser}\n     * @returns {Observable<User>}\n     */\n\n\n    login(loginData) {\n      return this._http.doRequest(ApiEndpoints.LOGIN, ApiMethod.POST, loginData).pipe(tap(rawUser => {\n        Logger.info('User Logged in', rawUser);\n        this.updateLocalUser(rawUser);\n      }));\n    }\n    /**\n     * Perform a logout and remove the current user from sessionStorage\n     * @returns {Observable<User>}\n     */\n\n\n    logout() {\n      return this._http.doRequest(ApiEndpoints.LOGOUT, ApiMethod.GET).pipe(tap(response => {\n        Logger.info('User logged out', this.getUser());\n        LocalStorageService.removeItem(LocalStorageTypes.SESSION, 'user');\n        this.authData.next(null);\n        return response;\n      }));\n    }\n    /**\n     * Perform a registration and store the returned user in sessionStorage\n     * @param {RawUser} registrationData\n     * @returns {Observable<User>}\n     */\n\n\n    register(registrationData) {\n      return this._http.doRequest(ApiEndpoints.REGISTER, ApiMethod.POST, registrationData).pipe(tap(rawUser => {\n        Logger.info('User registered', rawUser);\n        return this.updateLocalUser(rawUser);\n      }));\n    }\n    /**\n     * Change a user's password\n     * @param {RawUser} chgPwData\n     * @returns {Observable<User>}\n     */\n\n\n    changePassword(chgPwData) {\n      return this._http.doRequest(ApiEndpoints.CHANGE_PW, ApiMethod.PUT, chgPwData).pipe(tap(rawUser => {\n        Logger.info('User changed password', rawUser);\n        return this.updateLocalUser(rawUser);\n      }));\n    }\n    /**\n     * Provide user a means to reset their password\n     * @param forgotPwData\n     * @return {Observable<User>}\n     */\n\n\n    forgotPassword(forgotPwData) {\n      return this._http.doRequest(ApiEndpoints.FORGOT, ApiMethod.PUT, forgotPwData).pipe(tap(rawUser => {\n        Logger.info('User forgot password', rawUser);\n        this.updateLocalUser(rawUser);\n      }));\n    }\n    /**\n     * update a user's object in session storage\n     * @param user\n     * @returns {User}\n     */\n\n\n    updateLocalUser(user) {\n      LocalStorageService.setItem(LocalStorageTypes.SESSION, 'user', user);\n      this.authData.next(user);\n      return user;\n    }\n\n  }\n\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpService), i0.ɵɵinject(i2.AppErrorHandler));\n  };\n\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module"}