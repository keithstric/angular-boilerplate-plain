{"ast":null,"code":"import { HttpResponse } from '@angular/common/http';\nimport { Logger } from '@core/services/logger/logger';\nimport { catchError, finalize, tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@layout/services/loading/loading.service\";\nimport * as i2 from \"@core/services/http-cache/http-cache.service\";\n/**\n * Intercept all http requests\n * @class {HttpRequestInterceptor}\n */\n\nexport let HttpRequestInterceptor = /*#__PURE__*/(() => {\n  class HttpRequestInterceptor {\n    constructor(_loading, _cache) {\n      this._loading = _loading;\n      this._cache = _cache;\n    }\n    /**\n     * When an http request starts, set loading to true. When the request is finished, set loading to false.\n     * If an error is thrown be sure loading is set to false.\n     * @param {HttpRequest} request\n     * @param {HttpHandler} next\n     * @returns {Observable<HttpEvent<any>>}\n     */\n\n\n    intercept(request, next) {\n      this._loading.setLoading(true, request);\n\n      let cachedResponse;\n\n      if (request.method === 'GET') {\n        cachedResponse = this._cache.get(request);\n\n        if (cachedResponse) {\n          Logger.debug(`Response from cache for ${request.urlWithParams}`, cachedResponse);\n        }\n      } else if (request.method === 'POST' || request.method === 'PUT' || request.method === 'PATCH' || request.method === 'DELETE') {\n        const removedFromCache = this._cache.delete(request);\n\n        if (removedFromCache) {\n          Logger.debug(`Cleared ${request.urlWithParams} from the cache`);\n        }\n      }\n\n      return next.handle(request).pipe(tap(httpEvent => {\n        if (httpEvent instanceof HttpResponse) {\n          this._cache.put(request, httpEvent);\n        }\n\n        return cachedResponse ? cachedResponse : httpEvent;\n      }), catchError(err => {\n        throw err;\n      }), finalize(() => {\n        this._loading.setLoading(false, request);\n      }));\n    }\n\n  }\n\n  HttpRequestInterceptor.ɵfac = function HttpRequestInterceptor_Factory(t) {\n    return new (t || HttpRequestInterceptor)(i0.ɵɵinject(i1.LoadingService), i0.ɵɵinject(i2.HttpCacheService));\n  };\n\n  HttpRequestInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: HttpRequestInterceptor,\n    factory: HttpRequestInterceptor.ɵfac\n  });\n  return HttpRequestInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module"}