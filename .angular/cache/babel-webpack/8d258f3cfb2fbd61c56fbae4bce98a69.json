{"ast":null,"code":"'use strict';\n\nvar createVisitor = require('./create_visitor');\n/**\n * Visitor for the AST to construct a path with filled in parameters\n * @class ReverseVisitor\n * @borrows Visitor-visit\n */\n\n\nvar ReverseVisitor = createVisitor({\n  'Concat': function (node, context) {\n    var childResults = node.children.map(function (child) {\n      return this.visit(child, context);\n    }.bind(this));\n\n    if (childResults.some(function (c) {\n      return c === false;\n    })) {\n      return false;\n    } else {\n      return childResults.join('');\n    }\n  },\n  'Literal': function (node) {\n    return decodeURI(node.props.value);\n  },\n  'Splat': function (node, context) {\n    if (context[node.props.name]) {\n      return context[node.props.name];\n    } else {\n      return false;\n    }\n  },\n  'Param': function (node, context) {\n    if (context[node.props.name]) {\n      return context[node.props.name];\n    } else {\n      return false;\n    }\n  },\n  'Optional': function (node, context) {\n    var childResult = this.visit(node.children[0], context);\n\n    if (childResult) {\n      return childResult;\n    } else {\n      return '';\n    }\n  },\n  'Root': function (node, context) {\n    context = context || {};\n    var childResult = this.visit(node.children[0], context);\n\n    if (!childResult) {\n      return false;\n    }\n\n    return encodeURI(childResult);\n  }\n});\nmodule.exports = ReverseVisitor;","map":null,"metadata":{},"sourceType":"script"}