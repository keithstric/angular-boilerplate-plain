{"ast":null,"code":"import * as i0 from \"@angular/core\";\n/**\n * This service is for injecting components into the document body and being able to destroy them and ensuring that the component\n * is known to the ng component tree.\n *\n * Unfortunately this service cannot be injected via a parameter in a constructor. It must be used from the\n * Injector @link {Injector}\n *\n * @example\n *\n * constructor(private _injector: Injector){}\n *\n * someMethod() {\n *   const domInjector: DomInjectorService = this._injector.get(DomInjectorService);\n * }\n */\n\nexport let DomInjectorService = /*#__PURE__*/(() => {\n  class DomInjectorService {\n    constructor(_componentFactoryResolver, _appRef, _injector) {\n      this._componentFactoryResolver = _componentFactoryResolver;\n      this._appRef = _appRef;\n      this._injector = _injector;\n    }\n    /**\n     * Create a ComponentRef<unknown> from passed in component\n     * @param {any} component a component class\n     * @param {any} componentProps an object which contains the @Input properties to set on component\n     * @returns {ComponentRef}\n     */\n\n\n    createComponent(component, componentProps) {\n      // 1. Create a component reference from the component\n      const componentRef = this._componentFactoryResolver.resolveComponentFactory(component).create(this._injector);\n\n      if (componentProps && typeof componentRef.instance === 'object') {\n        Object.assign(componentRef.instance, componentProps);\n      }\n\n      return componentRef;\n    }\n    /**\n     * Add the passed componentRef to the ng component tree and append to the appendTo element\n     * @param {ComponentRef} componentRef\n     * @param {Element} appendTo\n     * @returns {HTMLElement}\n     */\n\n\n    attachComponent(componentRef, appendTo) {\n      // 2. Attach component to the appRef so that it's inside the ng component tree\n      this._appRef.attachView(componentRef.hostView); // 3. Get DOM element from component\n\n\n      const domElem = componentRef.hostView.rootNodes[0]; // 4. Append DOM element to the the appendTo element\n\n      appendTo.appendChild(domElem);\n      return domElem;\n    }\n    /**\n     * Remove the componentRef from the ng component tree, destroy the component and remove it\n     * from the DOM\n     * @param {ComponentRef} componentRef\n     */\n\n\n    removeComponent(componentRef) {\n      if (componentRef) {\n        const hostView = componentRef.hostView;\n        const hostDomElem = hostView.rootNodes[0];\n\n        this._appRef.detachView(componentRef.hostView);\n\n        componentRef.destroy();\n        hostDomElem.remove();\n      }\n    }\n\n  }\n\n  DomInjectorService.ɵfac = function DomInjectorService_Factory(t) {\n    return new (t || DomInjectorService)(i0.ɵɵinject(i0.ComponentFactoryResolver), i0.ɵɵinject(i0.ApplicationRef), i0.ɵɵinject(i0.Injector));\n  };\n\n  DomInjectorService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: DomInjectorService,\n    factory: DomInjectorService.ɵfac\n  });\n  return DomInjectorService;\n})();","map":null,"metadata":{},"sourceType":"module"}