{"ast":null,"code":"'use strict';\n\nvar Parser = require('./route/parser'),\n    RegexpVisitor = require('./route/visitors/regexp'),\n    ReverseVisitor = require('./route/visitors/reverse');\n\nRoute.prototype = Object.create(null);\n/**\n * Match a path against this route, returning the matched parameters if\n * it matches, false if not.\n * @example\n * var route = new Route('/this/is/my/route')\n * route.match('/this/is/my/route') // -> {}\n * @example\n * var route = new Route('/:one/:two')\n * route.match('/foo/bar/') // -> {one: 'foo', two: 'bar'}\n * @param  {string} path the path to match this route against\n * @return {(Object.<string,string>|false)} A map of the matched route\n * parameters, or false if matching failed\n */\n\nRoute.prototype.match = function (path) {\n  var re = RegexpVisitor.visit(this.ast),\n      matched = re.match(path);\n  return matched ? matched : false;\n};\n/**\n * Reverse a route specification to a path, returning false if it can't be\n * fulfilled\n * @example\n * var route = new Route('/:one/:two')\n * route.reverse({one: 'foo', two: 'bar'}) -> '/foo/bar'\n * @param  {Object} params The parameters to fill in\n * @return {(String|false)} The filled in path\n */\n\n\nRoute.prototype.reverse = function (params) {\n  return ReverseVisitor.visit(this.ast, params);\n};\n/**\n * Represents a route\n * @example\n * var route = Route('/:foo/:bar');\n * @example\n * var route = Route('/:foo/:bar');\n * @param {string} spec -  the string specification of the route.\n *     use :param for single portion captures, *param for splat style captures,\n *     and () for optional route branches\n * @constructor\n */\n\n\nfunction Route(spec) {\n  var route;\n\n  if (this) {\n    // constructor called with new\n    route = this;\n  } else {\n    // constructor called as a function\n    route = Object.create(Route.prototype);\n  }\n\n  if (typeof spec === 'undefined') {\n    throw new Error('A route spec is required');\n  }\n\n  route.spec = spec;\n  route.ast = Parser.parse(spec);\n  return route;\n}\n\nmodule.exports = Route;","map":null,"metadata":{},"sourceType":"script"}