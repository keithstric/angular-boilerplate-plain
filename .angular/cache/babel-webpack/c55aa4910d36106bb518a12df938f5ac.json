{"ast":null,"code":"import { SetLoadingAction } from '@core/root-store/loading/loading.action';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/store\";\n/**\n * This service is for managing the state of a loading spinner\n */\n\nexport let LoadingService = /*#__PURE__*/(() => {\n  class LoadingService {\n    constructor(store) {\n      this.store = store;\n      this.loadingMap = new Map();\n    }\n    /**\n     * This method is only called from the {@link HttpRequestInterceptor}\n     * We can't just dispatch the action with the value of the loading argument, we\n     * must ensure that there are no pending requests still loading in the loadingMap\n     * @param loading {boolean}\n     * @param request {string}\n     */\n\n\n    setLoading(loading, request) {\n      if (loading === true) {\n        this.loadingMap.set(request, loading);\n        this.store.dispatch(new SetLoadingAction(true));\n      } else if (loading === false && this.loadingMap.has(request)) {\n        this.loadingMap.delete(request);\n\n        if (this.loadingMap.size === 0) {\n          this.store.dispatch(new SetLoadingAction(false));\n        }\n      }\n    }\n\n  }\n\n  LoadingService.ɵfac = function LoadingService_Factory(t) {\n    return new (t || LoadingService)(i0.ɵɵinject(i1.Store));\n  };\n\n  LoadingService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: LoadingService,\n    factory: LoadingService.ɵfac,\n    providedIn: 'root'\n  });\n  return LoadingService;\n})();","map":null,"metadata":{},"sourceType":"module"}