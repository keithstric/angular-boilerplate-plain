{"ast":null,"code":"import { NavigationEnd, NavigationStart } from '@angular/router';\nimport { BehaviorSubject } from 'rxjs';\nimport { titleCaseString } from '@shared/utils/string.utils';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\n/**\n * Provides management of breadcrumbs base on the route\n */\n\nexport let BreadcrumbService = /*#__PURE__*/(() => {\n  class BreadcrumbService {\n    /**\n     * BreadcrumbService constructor. Subscribes to router events and updates breadcrumbs\n     * accordingly\n     * @param _router\n     * @constructor\n     */\n    constructor(_router) {\n      this._router = _router;\n      this.breadcrumbs = [];\n      this.breadcrumbsSub = new BehaviorSubject([]);\n\n      _router.events.subscribe(evt => {\n        if (evt instanceof NavigationStart) {\n          if (evt.navigationTrigger === 'popstate') {\n            this.goBackOne();\n          }\n        } else if (evt instanceof NavigationEnd) {\n          const title = this._getBcTitle(evt.urlAfterRedirects);\n\n          if (title && title !== 'Unknown') {\n            this.addBreadcrumb({\n              url: evt.urlAfterRedirects,\n              title\n            });\n          }\n        }\n      });\n    }\n    /**\n     * Add a breadcrumb to the breadcrumbs array\n     * @param breadCrumb {Breadcrumb}\n     */\n\n\n    addBreadcrumb(breadCrumb) {\n      const breadcrumbExists = this.breadcrumbs.find(bc => bc.url === breadCrumb.url);\n\n      if (!breadcrumbExists) {\n        this.breadcrumbs.push(breadCrumb);\n        this.breadcrumbsSub.next(this.breadcrumbs);\n      }\n    }\n    /**\n     * Go back one breadcrumb\n     */\n\n\n    goBackOne() {\n      this.breadcrumbs.pop();\n      this.breadcrumbsSub.next(this.breadcrumbs);\n    }\n    /**\n     * Get the breadcrumb title from the route\n     * @param url {string}\n     * @returns {string}\n     * @private\n     */\n\n\n    _getBcTitle(url) {\n      const urlArr = url.split('/');\n      const unCasedTitle = urlArr[urlArr.length - 1] || 'Unknown';\n      return titleCaseString(unCasedTitle);\n    }\n\n  }\n\n  BreadcrumbService.ɵfac = function BreadcrumbService_Factory(t) {\n    return new (t || BreadcrumbService)(i0.ɵɵinject(i1.Router));\n  };\n\n  BreadcrumbService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: BreadcrumbService,\n    factory: BreadcrumbService.ɵfac,\n    providedIn: 'root'\n  });\n  return BreadcrumbService;\n})();","map":null,"metadata":{},"sourceType":"module"}